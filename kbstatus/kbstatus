#!/usr/bin/env python3

# This script is a simple wrapper which prefixes each i3status line with custom
# information. It is a python reimplementation of:
# http://code.stapelberg.de/git/i3status/tree/contrib/wrapper.pl
#
# To use it, ensure your ~/.i3status.conf contains this line:
#     output_format = "i3bar"
# in the 'general' section.
# Then, in your ~/.i3/config, use:
#     status_command i3status | kbstatus
# In the 'bar' section.
#
# In its current version it will display the cpu frequency governor, but you
# are free to change it to display whatever you like, see the comment in the
# source code below.
#
# Copyright (c) 2023 github.com/judecabra
# This program is free software. It comes without any warranty, to the extent
# permitted by applicable law. You can redistribute it and/or modify it under
# the terms of the Do What The Fuck You Want To Public License (WTFPL), Version
# 2, as published by Sam Hocevar. See http://sam.zoy.org/wtfpl/COPYING for more
# details.

import sys
import json
import os


def get_led_mask() -> str:
    """Get the led mask from xset."""
    stream = os.popen('xset -q')
    output = stream.readlines()
    led = output[1].split()[-1]
    return led


def get_kb_layouts_dict() -> dict:
    """Rturns the installed keyboard layouts in a dictionary."""
    stream = os.popen('setxkbmap -query')
    output = stream.readlines()
    layouts = output[2].split(':')[-1].strip().split(',')
    return {str(k): v for k, v in enumerate(layouts)}


def get_kb_layout(mask: str) -> str:
    """Returns the current keyboard layout state."""
    kb_layouts_dict = get_kb_layouts_dict()
    return kb_layouts_dict.get(mask[4], '**')


def get_kb_locks(mask: str) -> str:
    """Returns the current keyboard locks state."""
    kb_locks_list = {'0': '', '1': 'CAPS', '2': 'NUM', '3': 'CAPS NUM'}
    return kb_locks_list.get(mask[7], '**')


def print_line(message):
    """Non-buffered printing to stdout."""
    sys.stdout.write(message + '\n')
    sys.stdout.flush()


def read_line():
    """Interrupted respecting reader for stdin."""
    # try reading a line, removing any extra whitespace
    try:
        line = sys.stdin.readline().strip()
        # i3status sends EOF, or an empty line
        if not line:
            sys.exit(3)
        return line
    # exit on ctrl-c
    except KeyboardInterrupt:
        sys.exit()


def get_line_prefix():
    """Returns a generator which yields the i3status line and the prefix."""
    # Skip the first line which contains the version header.
    print_line(read_line())

    # The second line contains the start of the infinite array.
    print_line(read_line())

    while True:
        line, prefix = read_line(), ''
        # ignore comma at start of lines
        if line.startswith(','):
            line, prefix = line[1:], ','
        yield line, prefix


def get_kb_state():
    """Returns the current keyboard state in json format."""
    mask = get_led_mask()
    kb_layout = get_kb_layout(mask)
    kb_locks = get_kb_locks(mask)
    return {
        'name': 'keyboard',
        'markup': 'none',
        'color': '#22A198',
        'full_text': f'{kb_locks} {kb_layout}',
    }


if __name__ == '__main__':

    line_generator = get_line_prefix()
    while True:
        line, prefix = next(line_generator)
        j = json.loads(line)
        # insert information into the start of the json, but could be anywhere
        # CHANGE THIS LINE TO INSERT SOMETHING ELSE
        j.insert(0, get_kb_state())
        # and echo back new encoded json
        print_line(prefix + json.dumps(j))
